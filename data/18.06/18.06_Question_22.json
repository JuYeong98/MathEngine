{
       "Course": "Linear Algebra",
       "Topic": "The Idea of a Linear Transformation (8.1, Q12)",
       "Original question": "Suppose a linear T transforms (1,1) to (2,2) and (2,0) to (0,0). Find T(v), when v=[2,2], v=(3,1), v=(-1,1), v=(a,b).",
       "Codex input": "Use a while True loop to find a random matrix M such that M*np.array([1,1]) = np.array([2,2]) and M*np.array([2,0]) = np.array([0,0]).\nFind M*np.array([2,2]).\nFind M*np.array([3,1]).\nFind M*np.array([-1,1]).\nUse Sympy to find Find M*np.array([a,b]).",
       "Codex code": "import numpy as np\nimport sympy as sp\n\na, b = sp.symbols('a b')\n\nwhile True:\n    M = np.random.randint(0, 10, (2, 2))\n    if np.array_equal(M.dot(np.array([1, 1])), np.array([2, 2])) and np.array_equal(M.dot(np.array([2, 0])), np.array([0, 0])):\n        break\n\nprint(M)\nprint(M.dot(np.array([2, 2])))\nprint(M.dot(np.array([3, 1])))\nprint(M.dot(np.array([-1, 1])))\nprint(M.dot(np.array([a, b])))",
       "Codex code explanation": "1. It's creating a random 2x2 matrix M.\n2. It's checking if M*np.array([1,1]) = np.array([2,2]) and M*np.array([2,0]) = np.array([0,0]).\n3. If the above is true, it breaks out of the while loop.\n4. If the above is false, it goes back to step 1.",
       "Program solution": "T(v) = (4, 4); (2, 2); (2, 2); if v = (a, b) = b(1, 1) + ((a\u2212b)/2)*(2, 0) then T(v) = b(2, 2) + (0, 0)",
       "Solution type": "Manual",
       "GPT-3 response": "T(v) = (2,2) when v = (1,1)\n\nT(v) = (0,0) when v = (2,0)\n\nT(v) = (4,4) when v = (3,1)\n\nT(v) = (-2,-2) when v = (-1,1)\n\nT(v) = (2a,2b) when v = (a,b)",
       "GPT-3 evaluation": "Incorrect"
}