{
       "Course": "Mathematics for Computer Science",
       "Topic": "Probability",
       "Original question": "Three 6.042 students\u2014Kirari, Noelle, and Cobeni\u2014are playing a game of Tan Tan Taan!. During each round of Tan Tan Taan!, each player is dealt 4 cards of their own, and one additional card is shared among all players, so that each player has 5 cards that they can use (the 4 cards of their own along with the single shared card). Cards are uniformly distributed from a 52-card deck. If you get four of a kind (for example, four aces or four 2\u2019s), you can continue playing in the next round. If you don\u2019t get four of a kind, you must quit and return to doing your 6.042 homework. Cards from round to round are mutually independent. This game is so fun that even if two of the three players must quit and return to their 6.042 homework, the third player will continue playing alone as long as they are able to. What is the expected number of rounds that Kirari will play?",
       "Codex input": "Calculate the probability a 5 card hand has 4 of a kind.",
       "Codex code": "import random\n\ndef main():\n    \"\"\"\n    Calculate the probability a 5 card hand has 4 of a kind.\n    \"\"\"\n    deck = create_deck()\n    five_card_hands = create_five_card_hands(deck)\n    four_of_a_kind_hands = get_four_of_a_kind_hands(five_card_hands)\n    probability = get_probability(five_card_hands, four_of_a_kind_hands)\n    print(probability)\n\ndef create_deck():\n    \"\"\"\n    Create a deck of 52 cards.\n    \"\"\"\n    deck = []\n    for rank in range(2, 15):\n        for suit in ['C', 'D', 'H', 'S']:\n            deck.append((rank, suit))\n    return deck\n\ndef create_five_card_hands(deck):\n    \"\"\"\n    Create a list of all possible 5 card hands from a deck.\n    \"\"\"\n    five_card_hands = []\n    for i in range(len(deck)):\n        for j in range(i + 1, len(deck)):\n            for k in range(j + 1, len(deck)):\n                for l in range(k + 1, len(deck)):\n                    for m in range(l + 1, len(deck)):\n                        five_card_hands.append([deck[i], deck[j], deck[k], deck[l], deck[m]])\n    return five_card_hands\n\ndef get_four_of_a_kind_hands(five_card_hands):\n    \"\"\"\n    Get all the hands that have 4 of a kind.\n    \"\"\"\n    four_of_a_kind_hands = []\n    for hand in five_card_hands:\n        if is_four_of_a_kind(hand):\n            four_of_a_kind_hands.append(hand)\n    return four_of_a_kind_hands\n\ndef is_four_of_a_kind(hand):\n    \"\"\"\n    Check if a hand has 4 of a kind.\n    \"\"\"\n    ranks = [card[0] for card in hand]\n    for rank in ranks:\n        if ranks.count(rank) == 4:\n            return True\n    return False\n\ndef get_probability(five_card_hands, four_of_a_kind_hands):\n    \"\"\"\n    Get the probability a 5 card hand has 4 of a kind.\n    \"\"\"\n    probability = len(four_of_a_kind_hands) / len(five_card_hands)\n    return probability\n\nif __name__ == '__main__':\n    main()",
       "Codex code explanation": "1. Create a deck of 52 cards.\n\nThe deck is created by creating a list of 52 tuples, each tuple representing a card. The first element of the tuple is the rank of the card, and the second element is the suit of the card.\n\n2. Create a list of all possible 5 card hands from a deck.\n\nThe list of all possible 5 card hands is created by iterating through the deck, and for each iteration, iterating through the rest of the deck to create a second card, then iterating through the rest of the deck to create a third card, and so on.\n\n3. Get all the hands that have 4 of a kind.\n\nThe hands that have 4 of a kind are determined by iterating through the list of all possible 5 card hands, and checking if the hand has 4 of a kind.\n\n4. Get the probability a 5 card hand has 4 of a kind.\n\nThe probability a 5 card hand has 4 of a kind is the number of hands that have 4 of a kind divided by the total number of possible 5 card hands.",
       "Program solution": "1/(1-624/(52!/5!/47!))",
       "Solution type": "Automatic Zero-shot",
       "GPT-3 response": "# Kirari's expected number of rounds is 1.",
       "GPT-3 evaluation": "Incorrect"
}