{
       "Course": "MATH",
       "Topic": "Prealgebra",
       "Original question": "How many different primes are in the prime factorization of 87*89*91*93?",
       "Codex input": "Same as original question",
       "Codex code": "from math import sqrt\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(sqrt(n)) + 1):\n        if is_prime(i) and n % i == 0:\n            factors.append(i)\n    return factors\n\ndef main():\n    n = 87 * 89 * 91 * 93\n    print(len(set(prime_factors(n))))\n\nif __name__ == '__main__':\n    main()",
       "Codex code explanation": "1. We define a function that checks if a number is prime.\n2. We define a function that returns a list of prime factors of a number.\n3. We define a function that calls the previous two functions and prints the length of the set of prime factors.\nThe set() function returns a set of unique elements from a list.\nThe main() function is called at the bottom of the code.",
       "Program solution": 6.0,
       "Solution type": "Automatic Zero-shot",
       "GPT-3 response": "There are six different primes in the prime factorization of 87*89*91*93.",
       "GPT-3 evaluation": "Correct"
}